
Документация
1. UserController
UserController отвечает за взаимодействие с данными пользователя, заказами, автомобилями и выполнением различных операций для клиентского интерфейса.

Методы:
initialize()
Инициализирует объекты DAO и загружает данные о заказах и автомобилях. Этот метод вызывается при инициализации контроллера.

loadOrderDetailsData()
Загружает данные о деталях заказов и отображает их в TextArea. Также обрабатывает ошибки SQL, если они возникнут.

setProfileData(Customer customer)
Устанавливает данные пользователя в TextArea (информация о клиенте).

loadCarsData()
Загружает список автомобилей из базы данных и отображает их в TextArea. Обрабатывает ошибки SQL и NullPointerException.

handleLogoutButton(ActionEvent event)
Обрабатывает нажатие кнопки выхода. Перенаправляет пользователя на главное окно и закрывает текущее окно.

handleBuyCarButtonClick()
Обрабатывает покупку автомобиля. Включает проверку введенных данных, расчет стоимости и добавление нового заказа. Также обрабатывает ошибки ввода и обновление данных заказа.

showAlert(Alert.AlertType alertType, String invalidInput, String s)
Отображает уведомления (alert) пользователю, сообщая о различных ошибках или успехах.

setUserController(UserController userController)
Устанавливает экземпляр UserController для связи между контроллерами.

getCarIdTextField()
Возвращает текстовое поле для ввода ID автомобиля.

2. AdminController
AdminController отвечает за функциональность, связанную с администрированием в приложении, включая управление автомобилями, клиентами и заказами.

Методы:
initialize()
Вызывается при загрузке контроллера. Отвечает за инициализацию и загрузку данных в текстовые области.

loadCarsData()
Загружает данные об автомобилях из базы данных и отображает их в TextArea.

loadCustomersData()
Загружает данные о клиентах из базы данных и отображает их в TextArea.

loadOrdersData()
Загружает данные о заказах из базы данных и отображает их в TextArea.

loadAdminData()
Загружает данные об администраторе из базы данных.

handleLogoutButton(ActionEvent event)
Обрабатывает выход администратора и перенаправляет его на главный экран.

showErrorMessage(String message)
Отображает сообщение об ошибке.

showSuccessMessage(String message)
Отображает сообщение об успешной операции.

showAlert(Alert.AlertType alertType, String title, String message)
Универсальный метод для отображения уведомлений.

handleAddMachineButtonClick()
Добавляет новый автомобиль в базу данных.

handleRemoveCarButtonClick()
Удаляет автомобиль из базы данных по ID.

handleAddCostumerButtonClick()
Добавляет нового клиента в базу данных.

handleRemoveCustomerButtonClick()
Удаляет клиента из базы данных по ID.

clearFields()
Очищает поля ввода для автомобилей.

clearCustomerFields()
Очищает поля ввода для клиентов.

3. AdminDAO
AdminDAO предоставляет методы для взаимодействия с базой данных, включая операции с автомобилями, клиентами и заказами, а также управляет данными администратора.

Методы:
getAllCars()
Возвращает список всех автомобилей из базы данных, объединяя данные с таблицей производителей. Возвращает список объектов Car.

getAllCustomers()
Возвращает список всех клиентов из базы данных. Возвращает список объектов Customer.

getAllOrders()
Возвращает список всех заказов из базы данных, включая данные о клиенте и автомобиле. Возвращает список объектов Order.

getAdminData()
Возвращает данные о администраторах из базы данных. Возвращает список строк с данными о логине, пароле, имени и фамилии администратора.

addCustomer(Customer customer)
Добавляет нового клиента в таблицу customers. Возвращает true, если клиент был успешно добавлен.

addCar(int carId, int companyId, int year, String model, String companiesName, double price)
Добавляет новый автомобиль в таблицу cars. Возвращает true, если автомобиль был успешно добавлен.

deleteCarById(int carId)
Удаляет автомобиль из таблицы cars по его идентификатору. Возвращает true, если автомобиль был успешно удален.

removeCarById(int carId)
Удаляет автомобиль из таблицы cars по его идентификатору. Возвращает true, если автомобиль был успешно удален.

removeCustomerById(int customerId)
Удаляет клиента из таблицы customers по его идентификатору. Возвращает true, если клиент был успешно удален.

4. ClientDAO
ClientDAO реализует операции с базой данных для проверки пользователей, получения данных о клиентах, заказах и деталях заказов.

Методы:
validateUser(String login, String password)
Проверяет, существует ли пользователь с указанными логином и паролем в базе данных. Возвращает роль пользователя ("customer" или "admin"), если найден.

getCustomerByLoginAndPassword(String login, String password)
Получает данные о клиенте из таблицы customers по логину и паролю. Возвращает объект Customer.

getAllOrderDetails()
Возвращает список всех деталей заказов из таблицы order_details. Возвращает список объектов OrderDetail.

getCustomerIdByLoginAndPassword(String login, String password)
Получает идентификатор клиента по логину и паролю.

getCarPriceById(int carId)
Получает цену автомобиля по его ID.

addOrder(int customerId, int carId, double amount)
Добавляет новый заказ в таблицу orders. Возвращает true, если заказ был успешно добавлен.

updateOrderDetails(int customerId, int carId)
Обновляет детали заказа для клиента, если заказ существует, либо создает новый. Возвращает true, если операция прошла успешно.

getNextOrderId()
Получает следующий доступный идентификатор заказа для вставки нового заказа.

getNextOrderDetailsId()
Получает следующий доступный идентификатор детали заказа для вставки новых данных.

getOrderDetailsByCustomerId(int customerId)
Возвращает список всех деталей заказов для клиента по его customerId.